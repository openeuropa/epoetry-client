parameters:
    endpoint: "%env(string:EPOETRY_CONSOLE_SERVICE_URL)%"
    callback: "%env(string:EPOETRY_CONSOLE_CALLBACK_URL)%"
services:
  _defaults:
    autowire: true
    autoconfigure: true
    bind:
      string $endpoint: "%endpoint%"
      string $callback: "%callback%"

  Psr\Log\LoggerInterface: "@logger"
  Symfony\Component\Serializer\SerializerInterface: "@serializer"
  Symfony\Component\EventDispatcher\EventDispatcherInterface: "@event_dispatcher"
#  OpenEuropa\EPoetry\Authentication\AuthenticationInterface: "@openid_authentication"
  OpenEuropa\EPoetry\Authentication\AuthenticationInterface: "@client_cert_authentication"
  OpenEuropa\EPoetry\TicketValidation\TicketValidationInterface: "@eu_login_ticket_validation"

  OpenEuropa\EPoetry\:
    resource: '../../src'

  Symfony\Component\Console\Application:
    # Set to public so we can get it from container in bin file
    # via "$container->get(Application::class)"
    public: true
    calls:
      - setDispatcher: [ "@event_dispatcher"]

  serializer:
    class: \OpenEuropa\EPoetry\Serializer\Serializer

  console_handler:
    class: \Symfony\Bridge\Monolog\Handler\ConsoleHandler
    tags:
        - { name: kernel.event_subscriber }

  event_dispatcher:
    class: \Symfony\Component\EventDispatcher\EventDispatcher

  http_request_factory:
    class: \Http\Discovery\Psr17Factory

  http_client:
    class: \GuzzleHttp\Client

  logger:
    class: \Monolog\Logger
    arguments:
      $name: "epoetry"
    calls:
      - setHandlers:
        - [ "@console_handler" ]

  openid_authentication:
    class: \OpenEuropa\EPoetry\Authentication\OpenID\OpenIDAuthentication
    arguments:
      $wellKnownUrl: "%env(string:EPOETRY_CONSOLE_OPENID_WELL_KNOWN_URL)%"
      $clientMetadataFilepath: "%env(string:EPOETRY_CONSOLE_OPENID_AUTH_CLIENT_METADATA)%"
      $serviceUrl: "%env(string:EPOETRY_CONSOLE_OPENID_SERVICE_URL)%"
      $tokenEndpoint: "%env(string:EPOETRY_CONSOLE_OPENID_TOKEN_ENDPOINT)%"
      $logger: "@logger"

  client_cert_authentication:
    class: \OpenEuropa\EPoetry\Authentication\ClientCertificate\ClientCertificateAuthentication
    arguments:
      $serviceUrl: "%env(string:EPOETRY_CONSOLE_CLIENT_CERT_SERVICE_URL)%"
      $certFilepath: "%env(string:EPOETRY_CONSOLE_CLIENT_CERT_PATH)%"
      $certPassword: "%env(string:EPOETRY_CONSOLE_CLIENT_CERT_PASSWORD)%"
      $euLoginBasePath: "%env(string:EPOETRY_CONSOLE_CLIENT_EU_LOGIN_BASEPATH)%"
      $logger: "@logger"

  eu_login_ticket_validation:
    class: \OpenEuropa\EPoetry\TicketValidation\EuLogin\EuLoginTicketValidation
    arguments:
      $callbackUrl: "%env(string:EPOETRY_CONSOLE_CALLBACK_URL)%"
      $euLoginBasePath: "%env(string:EPOETRY_CONSOLE_CLIENT_TICKET_VALIDATION_EU_LOGIN_BASEPATH)%"
      $jobAccount: "%env(string:EPOETRY_CONSOLE_CLIENT_TICKET_VALIDATION_JOB_ACCOUNT)%"
      $requestFactory: "@http_request_factory"
      $httpClient: "@http_client"
      $logger: "@logger"
